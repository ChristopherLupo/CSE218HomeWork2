public class Student implements Cloneable{

	@Override
	public String toString() {
		return "Student [name=" + name + ", id=" + id + ", gpa=" + gpa + "]";
	}

	private String name;
	private int id;
	private double gpa;

	public Student(String name, int id, double gpa) {
		super();
		this.name = name;
		this.id = id;
		this.gpa = gpa;
	}
	
	public Student(Student student) {
		this.name = student.getName();
		this.id = student.getId();
		this.gpa = student.getGpa();
	}
	
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public double getGpa() {
		return gpa;
	}

	public void setGpa(double gpa) {
		this.gpa = gpa;
	}

	public Student deepCopy() throws CloneNotSupportedException{
		Student deepClone = (Student) super.clone();
		deepClone.name = name;
		deepClone.id = id;
		deepClone.gpa = gpa;
		return deepClone;
	}
	
	public Student shallowCopy() throws CloneNotSupportedException{
		Student clone = (Student) super.clone();
		
		return clone;
	}
	
	public boolean equals(Student student){
		if(name.equals(student.getName())){
			if(id == student.getId()){
				if(gpa == student.getGpa()){
					return true;
				}
			}
		}
		return false;
	}
}

public class StudentBag {
	private Student[] students;
	private int nElems;

	public StudentBag(int maxSize) {
		students = new Student[maxSize];
		nElems = 0;
	}

	public void add(Student s1) {
		students[nElems++] = s1;
	}

	public void display() {
		for (int i = 0; i < nElems; i++) {
			System.out.println(students[i] + " ");
		}
	}

	public boolean remove(int value) {
		boolean found = false;
		for (int i = 0; i < nElems; i++) {
			if (students[i].getId() == value) {
				found = true;
				for (int j = i; j < nElems - 1; j++) {
					students[j] = students[j + 1];
				}
				nElems--;
				return found;
			}
		}
		return found;
	}

	public boolean find(int value) {
		boolean found = false;
		for (int i = 0; i < nElems; i++) {
			if (students[i].getId() == value) {
				found = true;
			}
		}
		return found;
	}

	public void bubbleSort() {
		int out;
		int in;
		for (out = nElems - 1; out >= 1; out--) {
			for (in = 0; in < out; in++) {
				if (students[in].getName().compareToIgnoreCase(students[in + 1].getName()) > 0) {
					swap(in, in + 1);
				}
			}
		}
	}

	public void selectionSort() {
		int out;
		int in;
		int min;

		for (out = 0; out < nElems - 1; out++) {
			min = out;
			for (in = out + 1; in < nElems; in++) {
				if (students[in].getId() < students[min].getId()) {
					min = in;
				}
			}
			swap(out, min);
		}
	}

	private void swap(int one, int two) {
		Student temp = students[one];
		students[one] = students[two];
		students[two] = temp;
	}

	public void insertionSort() {
		int in;
		int out;

		for (out = 1; out < nElems; out++) {
			Student temp = students[out];
			in = out;
			while (in > 0 && students[in - 1].getGpa() >= temp.getGpa()) {
				students[in] = students[in - 1];
				in--;
			}
			students[in] = temp;

		}
	}

import javafx.application.Application;
import javafx.geometry.Pos;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.layout.HBox;
import javafx.stage.Stage;

public class Demo extends Application {

	public static void main(String[] args) {
		Application.launch(args);
	}

	public void start(Stage primaryStage) throws CloneNotSupportedException {
		StudentBag bag = new StudentBag(1000);

		Student s1 = new Student("Bob", 1, .1);

		bag.add(s1);

		for (int i = 1; i < 1000; i++) {
			Student deep = s1.deepCopy();

			deep.setId(deep.getId() + i);

			if (deep.getId() % 2 == 0) {
				deep.setName("Chris");
			}

			deep.setGpa((((deep.getGpa() * 10) + i) % 40) / 10);

			if (deep.getGpa() % 4.0 == 0) {
				deep.setGpa(4.0);
			}

			bag.add(deep);
		}

		bag.display();

		long time = System.nanoTime();
		bag.bubbleSort();
		long bubble = System.nanoTime() - time;

		bag.display();

		time = System.nanoTime();
		bag.insertionSort();
		long insert = System.nanoTime() - time;

		bag.display();

		time = System.nanoTime();
		bag.selectionSort();
		long select = System.nanoTime() - time;

		bag.display();

		HBox pane = new HBox();
		
		Label l1 = new Label("Bubble Sort Nano Time: " + bubble + "\nInsertion Sort Nano Time: " + insert
				+ "\nSelection Sort Nano Time: " + select);

		pane.getChildren().add(l1);
		
		pane.setAlignment(Pos.CENTER);

		Scene scene = new Scene(pane, 300, 150);

		primaryStage.setScene(scene);
		primaryStage.show();
	}
}
